缓存是一种存储机制，旨在提供高速访问已保存的数据或计算结果。它通过将数据存储在临时存储位置，当再次需要这些数据时，可以迅速从缓存中检索，而不是重新进行原始数据的昂贵或时间耗费的获取和计算过程。

在设计缓存系统时，需要考虑不同缓存策略的优缺点和适用场景，以优化缓存系统的性能和效率。以下是一些常见的缓存策略：

Cache-Aside（旁路缓存）：
应用程序首先检查缓存中是否有请求的数据，如果有则返回缓存的数据，否则从数据库查询数据并更新缓存，然后返回数据。
Read-Through（读取穿透）：
缓存对数据库进行读取/查询操作，然后更新自己并将请求数据返回给最终用户。
Refresh-Ahead（预刷新）：
在数据过期之前刷新缓存数据，适用于热数据。
Write-Through（写穿透）：
缓存作为主数据存储，首先在缓存中更新数据，然后才在数据库中更新数据。
Write-Back（写回）：
类似于 write-through，但数据库写调用是异步的。

当然，本次作业中，这些都没用到，就用了两个字典存储了已访问且未超时的数据一个用来存储访问 /batchGetUserInfo 路由的信息，另一个存储访问 /getUserRatings 路由的信息，提高检索速度
